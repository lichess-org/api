get:
  operationId: apiGamesUser
  summary: Export games of a user
  description: |
    Download all games of any user in PGN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format.
    Games are sorted by reverse chronological order (most recent first).
    We recommend streaming the response, for it can be very long.
    <https://lichess.org/@/german11> for instance has more than 500,000 games.
    The game stream is throttled, depending on who is making the request:
      - Anonymous request: 20 games per second
      - [OAuth2 authenticated](#section/Introduction/Authentication) request: 30 games per second
      - Authenticated, downloading your own games: 60 games per second
  tags:
    - Games
  security:
    - OAuth2: []
  parameters:
    - in: path
      name: username
      description: The user name.
      schema:
        type: string
      required: true
    - in: query
      name: since
      description: Download games played since this timestamp. Defaults to account creation date.
      schema:
        type: integer
        minimum: 1356998400070
    - in: query
      name: until
      description: Download games played until this timestamp. Defaults to now.
      schema:
        type: integer
        minimum: 1356998400070
    - in: query
      name: max
      description: How many games to download. Leave empty to download all games.
      schema:
        type: integer
        minimum: 1
    - in: query
      name: vs
      description: "[Filter] Only games played against this opponent"
      schema:
        type: string
    - in: query
      name: rated
      description: "[Filter] Only rated (`true`) or casual (`false`) games"
      schema:
        type: boolean
    - in: query
      name: perfType
      description: |
        [Filter] Only games in these speeds or variants.
        Multiple perf types can be specified, separated by a comma.
        Example: blitz,rapid,classical
      schema:
        allOf:
          - $ref: "../../schemas/PerfType.yaml"
          - default: null
    - in: query
      name: color
      description: "[Filter] Only games played as this color."
      schema:
        type: string
        enum:
          - white
          - black
    - in: query
      name: analysed
      description: "[Filter] Only games with or without a computer analysis available"
      schema:
        type: boolean
    - in: query
      name: moves
      description: Include the PGN moves.
      schema:
        type: boolean
        default: true
    - in: query
      name: pgnInJson
      description: Include the full PGN within the JSON response, in a `pgn` field.
        The response type must be set to `application/x-ndjson` by the request `Accept` header.
      schema:
        type: boolean
        default: false
    - in: query
      name: tags
      description: Include the PGN tags.
      schema:
        type: boolean
        default: true
    - in: query
      name: clocks
      description: |
        Include clock status when available.
        Either as PGN comments: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`
        Or in a `clocks` JSON field, as centisecond integers, depending on the response type.
      schema:
        type: boolean
        default: false
    - in: query
      name: evals
      description: |
        Include analysis evaluations and comments, when available.
        Either as PGN comments: `12. Bxf6 { [%eval 0.23] } a3 { [%eval -1.09] }`
        Or in an `analysis` JSON field, depending on the response type.
      schema:
        type: boolean
        default: false
    - in: query
      name: accuracy
      description: |
        Include [accuracy percent](https://lichess.org/page/accuracy) of each player, when available. Only available in JSON.
      schema:
        type: boolean
        default: false
    - in: query
      name: opening
      description: |
        Include the opening name.
        Example: `[Opening "King's Gambit Accepted, King's Knight Gambit"]`
      schema:
        type: boolean
        default: false
    - in: query
      name: division
      description: |
        Plies which mark the beginning of the middlegame and endgame.
        Only available in JSON
      schema:
        type: boolean
        default: false
    - in: query
      name: ongoing
      description: Ongoing games are delayed by a few seconds ranging from 3 to 60 depending on the time control, as to prevent cheat bots from using this API.
      schema:
        type: boolean
        default: false
    - in: query
      name: finished
      description: Include finished games. Set to `false` to only get ongoing games.
      schema:
        type: boolean
        default: true
    - in: query
      name: literate
      description: |
        Insert textual annotations in the PGN about the opening, analysis variations, mistakes, and game termination.
        Example: `5... g4? { (-0.98 â†’ 0.60) Mistake. Best move was h6. } (5... h6 6. d4 Ne7 7. g3 d5 8. exd5 fxg3 9. hxg3 c6 10. dxc6)`
      schema:
        type: boolean
        default: false
    - in: query
      name: lastFen
      description: |
        Include the X-FEN notation of the last position of the game.
        The response type must be set to `application/x-ndjson` by the request `Accept` header.
      schema:
        type: boolean
        default: false
    - in: query
      name: withBookmarked
      description: |
        Add a `bookmarked: true` JSON field when the logged in user has bookmarked the game.
        The response type must be set to `application/x-ndjson` by the request `Accept` header.
      schema:
        type: boolean
        default: false
    - in: query
      name: sort
      description: "Sort order of the games."
      schema:
        type: string
        default: dateDesc
        enum:
          - dateAsc
          - dateDesc
  responses:
    "200":
      description: The games of the user.
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: string
            default: "'*'"
      content:
        application/x-chess-pgn:
          schema:
            $ref: "../../schemas/GamePgn.yaml"
        application/x-ndjson:
          schema:
            $ref: "../../schemas/GameJson.yaml"
          example:
            $ref: "../../examples/games-apiGamesUserJson.json"
